/*
 * Copyright 2016-2021 The jetcd authors
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    alias(libs.plugins.versions)
    alias(libs.plugins.shadow)
    alias(libs.plugins.spotless)
    alias(libs.plugins.nexusPublish)
    alias(libs.plugins.axionRelease)
    alias(libs.plugins.testLogger)
    alias(libs.plugins.testRetry)

    id 'java-library'
    id 'groovy'
}

group = 'com.github.lburgazzoli'

apply from: "${rootProject.projectDir}/gradle/style.gradle"
apply from: "${rootProject.projectDir}/gradle/quality.gradle"
apply from: "${rootProject.projectDir}/gradle/publishing-release.gradle"
apply from: "${rootProject.projectDir}/gradle/publishing-release-tasks.gradle"
apply from: "${rootProject.projectDir}/gradle/versions.gradle"
apply from: "${rootProject.projectDir}/gradle/publish.gradle"
apply from: "${rootProject.projectDir}/gradle/release.gradle"

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    api libs.slf4j

    implementation libs.guava
    implementation libs.bundles.jackson
    implementation libs.bundles.chicory
    implementation libs.bundles.pulsar

    implementation platform("org.apache.groovy:groovy-bom:${libs.versions.groovy.get()}")
    implementation "org.apache.groovy:groovy"

    testImplementation platform("org.spockframework:spock-bom:${libs.versions.spock.get()}")
    testImplementation "org.spockframework:spock-core"

    testImplementation libs.bundles.testing
    testImplementation libs.bundles.testingIt

    testRuntimeOnly libs.bundles.log4j
}


compileJava {
    options.release = 17
}

test {
    useJUnitPlatform()

    maxParallelForks = Runtime.runtime.availableProcessors() ?: 1

    retry {
        maxRetries = 1
        maxFailures = 5
    }
}

testlogger {
    theme 'mocha-parallel'
    showStandardStreams true
}

tasks.register('allDeps', DependencyReportTask)

// disable standard jar task so we can have a single ube jar as result
jar.enabled = false

shadowJar {
    mergeServiceFiles()
}